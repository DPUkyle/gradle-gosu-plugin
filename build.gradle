import org.gosulang.gradle.build.VersionWriterTask

plugins {
    id 'net.researchgate.release' version '2.5.0'
    id 'com.gradle.plugin-publish' version '0.9.7'
    id 'maven'
    id 'signing'
    id 'groovy'
    id 'java-gradle-plugin'
}

wrapper {
    gradleVersion '3.5-rc-3'
}

group = 'org.gosu-lang.gosu'
description = """Gosu language compiler for Gradle.  Built with Gradle $project.gradle.gradleVersion.

This has also been tested extensively with Gradle version(s): $project.testedVersions

Projects applying this plugin require a compile-time dependency on the gosu-core-api library.  

This version requires Gosu 1.13.9 or greater, or 1.14.2 or greater. 

Please include this in the depencencies closure:

dependencies {
    compile group: 'org.gosu-lang.gosu', name: 'gosu-core-api', version: '$project.gosuVersion'
}
"""

final boolean isSnapshot = project.version.endsWith('-SNAPSHOT')

repositories {
    mavenLocal()
    maven {
        url 'https://oss.sonatype.org/content/repositories/snapshots/' //for Gosu snapshot builds
    }
	jcenter()
}

dependencies {
    compile     gradleApi()
    testCompile 'junit:junit:4.12'
    testCompile 'org.easytesting:fest-assert:1.3'
    testCompile 'org.hamcrest:hamcrest-library:1.3'
    testCompile 'org.spockframework:spock-core:1.0-groovy-2.4@jar'
}

gradlePlugin {
    plugins {
        gosuPlugin {
            id = 'org.gosu-lang.gosu'
            implementationClass = 'org.gosulang.gradle.GosuPlugin'
        }
    }
}

pluginBundle {
    website = 'http://gosu-lang.org'
    vcsUrl = 'https://github.com/gosu-lang/gradle-gosu-plugin'
    description = project.description
    tags = ['gosu']

    plugins {
        gosuPlugin {
            id = 'org.gosu-lang.gosu'
            displayName = 'Gosu Gradle Plugin'
        }
    }
}

task gradleVersionHelper(type: VersionWriterTask) {
    propertyToRead = 'gradleVersion'
    fallbackValue = project.gradle.gradleVersion
}

task gosuVersionHelper(type: VersionWriterTask) {
    propertyToRead = 'gosuVersion'
}

task testedVersionsHelper(type: VersionWriterTask) {
    propertyToRead = 'testedVersions'
}

dependencies {
    testRuntime files(gradleVersionHelper) // Persist a file containing the gradleVersion
    testRuntime files(gosuVersionHelper) // Persist a file containing the gosuVersion
    testRuntime files(testedVersionsHelper) // Persist a file containing the testedVersions
}

test {
  testLogging {
      events 'passed', 'failed', 'skipped'
  }
  environment('JAVA_TOOL_OPTIONS', '-Duser.language=en')
}

tasks.withType(AbstractCompile) {
    options.compilerArgs += ['-Xlint:unchecked']
    options.deprecation = true
    options.encoding = java.nio.charset.StandardCharsets.UTF_8
}

//constrain memory usage when running on CI server
if(System.getenv('CI') != null) {
    tasks.withType(AbstractCompile) { //covers JavaCompile and GroovyCompile
        options.fork = false
    }
    test {
        maxHeapSize = '1g'
        systemProperty 'org.gradle.testkit.debug', 'true' // prevents the testkit from spawning daemons and running out of memory
    }
}

task sourceJar(type: Jar) {
    classifier = 'sources'
    description 'generate sources'
    from sourceSets.main.allJava
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    description 'generate javadoc'
    from javadoc
}

artifacts {
    archives sourceJar, javadocJar
}

release {
    tagTemplate = 'v${version}'
    git {
        requireBranch = 'rel/.*'
    }
}

afterReleaseBuild.dependsOn publishPlugins, uploadArchives

/**
 * Only execute for release builds, which must be done locally.
 * Store keyId, password, secretKeyRingFile in ~/.gradle/gradle.properties
 */
signing {
    required { !isSnapshot && gradle.taskGraph.hasTask('uploadArchives') }
    sign configurations.archives
}

/* from 'maven' plugin */
uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> if(!isSnapshot) { signing.signPom(deployment) } }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: System.env.ossrhUsername, password: System.env.ossrhPassword)
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: System.env.ossrhUsername, password: System.env.ossrhPassword)
            }

            pom.project {
                name project.name
                packaging 'jar'
                description project.description
                url 'http://gosu-lang.github.io/'

                scm {
                    connection 'scm:git:git@github.com:gosu-lang/gosu-lang.git'
                    developerConnection 'scm:git:git@github.com:gosu-lang/gosu-lang.git'
                    url 'git@github.com:gosu-lang/gosu-lang.git'
                }

                licenses {
                    license {
                        name 'The Apache License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                developers {
                    developer {
                        name 'The Gosu Team'
                        email 'gosu.lang.team@gmail.com'
                        organization 'Guidewire'
                    }
                }
            }
        }
    }
}

/**
 * Fetches the publishing credentials from the build machine's env vars
 * Necessitated by https://issues.gradle.org/browse/GRADLE-3281
 */
task setupPluginUpload {

    onlyIf {
        !isSnapshot
    }

    doLast {
        String key = System.env.gradlePublishKey
        String secret = System.env.gradlePublishSecret

        if( !key || !secret ) {
            throw new RuntimeException('gradlePublishKey and/or gradlePublishSecret are not defined environment variables')
        }

        System.setProperty('gradle.publish.key', key)
        System.setProperty('gradle.publish.secret', secret)
    }

}

tasks.publishPlugins.dependsOn tasks.setupPluginUpload

// the gradle plugin portal isn't compatible with SNAPSHOT versions
// https://discuss.gradle.org/t/uploading-snapshot-versions-to-the-plugin-portal/11347
if (isSnapshot) {
    signArchives.enabled = false
    publishPlugins.enabled = false
}
